// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: plagiarism_detection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Language int32

const (
	Language_python3 Language = 0
	Language_cpp     Language = 1
	Language_java    Language = 2
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "python3",
		1: "cpp",
		2: "java",
	}
	Language_value = map[string]int32{
		"python3": 0,
		"cpp":     1,
		"java":    2,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_plagiarism_detection_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_plagiarism_detection_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{0}
}

type DuplicateCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabID uint64   `protobuf:"varint,1,opt,name=labID,proto3" json:"labID,omitempty"`
	Lan   Language `protobuf:"varint,2,opt,name=lan,proto3,enum=plagiarism_detection.Language" json:"lan,omitempty"`
}

func (x *DuplicateCheckRequest) Reset() {
	*x = DuplicateCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateCheckRequest) ProtoMessage() {}

func (x *DuplicateCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateCheckRequest.ProtoReflect.Descriptor instead.
func (*DuplicateCheckRequest) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{0}
}

func (x *DuplicateCheckRequest) GetLabID() uint64 {
	if x != nil {
		return x.LabID
	}
	return 0
}

func (x *DuplicateCheckRequest) GetLan() Language {
	if x != nil {
		return x.Lan
	}
	return Language_python3
}

type DuplicateCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparision *DuplicateCheckResponse_DuplicateCheckResponseValue `protobuf:"bytes,1,opt,name=comparision,proto3" json:"comparision,omitempty"`
	TimeStamp   string                                              `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (x *DuplicateCheckResponse) Reset() {
	*x = DuplicateCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateCheckResponse) ProtoMessage() {}

func (x *DuplicateCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateCheckResponse.ProtoReflect.Descriptor instead.
func (*DuplicateCheckResponse) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{1}
}

func (x *DuplicateCheckResponse) GetComparision() *DuplicateCheckResponse_DuplicateCheckResponseValue {
	if x != nil {
		return x.Comparision
	}
	return nil
}

func (x *DuplicateCheckResponse) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

type ViewReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabId        uint64 `protobuf:"varint,1,opt,name=lab_id,json=labId,proto3" json:"lab_id,omitempty"`
	TimeStamp    string `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	HtmlFileName string `protobuf:"bytes,3,opt,name=html_file_name,json=htmlFileName,proto3" json:"html_file_name,omitempty"`
}

func (x *ViewReportRequest) Reset() {
	*x = ViewReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewReportRequest) ProtoMessage() {}

func (x *ViewReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewReportRequest.ProtoReflect.Descriptor instead.
func (*ViewReportRequest) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{2}
}

func (x *ViewReportRequest) GetLabId() uint64 {
	if x != nil {
		return x.LabId
	}
	return 0
}

func (x *ViewReportRequest) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *ViewReportRequest) GetHtmlFileName() string {
	if x != nil {
		return x.HtmlFileName
	}
	return ""
}

type ViewReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtmlFileContent string `protobuf:"bytes,1,opt,name=html_file_content,json=htmlFileContent,proto3" json:"html_file_content,omitempty"`
}

func (x *ViewReportResponse) Reset() {
	*x = ViewReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewReportResponse) ProtoMessage() {}

func (x *ViewReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewReportResponse.ProtoReflect.Descriptor instead.
func (*ViewReportResponse) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{3}
}

func (x *ViewReportResponse) GetHtmlFileContent() string {
	if x != nil {
		return x.HtmlFileContent
	}
	return ""
}

type GenerateTestFilesForDuplicateCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeContent string   `protobuf:"bytes,1,opt,name=code_content,json=codeContent,proto3" json:"code_content,omitempty"`
	Lan         Language `protobuf:"varint,2,opt,name=lan,proto3,enum=plagiarism_detection.Language" json:"lan,omitempty"`
}

func (x *GenerateTestFilesForDuplicateCheckRequest) Reset() {
	*x = GenerateTestFilesForDuplicateCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTestFilesForDuplicateCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTestFilesForDuplicateCheckRequest) ProtoMessage() {}

func (x *GenerateTestFilesForDuplicateCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTestFilesForDuplicateCheckRequest.ProtoReflect.Descriptor instead.
func (*GenerateTestFilesForDuplicateCheckRequest) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateTestFilesForDuplicateCheckRequest) GetCodeContent() string {
	if x != nil {
		return x.CodeContent
	}
	return ""
}

func (x *GenerateTestFilesForDuplicateCheckRequest) GetLan() Language {
	if x != nil {
		return x.Lan
	}
	return Language_python3
}

type GenerateTestHTMLFileForViewReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp    string `protobuf:"bytes,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	HtmlFileName string `protobuf:"bytes,2,opt,name=html_file_name,json=htmlFileName,proto3" json:"html_file_name,omitempty"`
}

func (x *GenerateTestHTMLFileForViewReportRequest) Reset() {
	*x = GenerateTestHTMLFileForViewReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTestHTMLFileForViewReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTestHTMLFileForViewReportRequest) ProtoMessage() {}

func (x *GenerateTestHTMLFileForViewReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTestHTMLFileForViewReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateTestHTMLFileForViewReportRequest) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateTestHTMLFileForViewReportRequest) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *GenerateTestHTMLFileForViewReportRequest) GetHtmlFileName() string {
	if x != nil {
		return x.HtmlFileName
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{6}
}

type DuplicateCheckResponse_DuplicateCheckResponseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparisions []*DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion `protobuf:"bytes,1,rep,name=comparisions,proto3" json:"comparisions,omitempty"`
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue) Reset() {
	*x = DuplicateCheckResponse_DuplicateCheckResponseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateCheckResponse_DuplicateCheckResponseValue) ProtoMessage() {}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateCheckResponse_DuplicateCheckResponseValue.ProtoReflect.Descriptor instead.
func (*DuplicateCheckResponse_DuplicateCheckResponseValue) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue) GetComparisions() []*DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion {
	if x != nil {
		return x.Comparisions
	}
	return nil
}

type DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AnotherUserId uint64 `protobuf:"varint,2,opt,name=another_user_id,json=anotherUserId,proto3" json:"another_user_id,omitempty"`
	HtmlFileName  string `protobuf:"bytes,3,opt,name=html_file_name,json=htmlFileName,proto3" json:"html_file_name,omitempty"`
	Similarity    int32  `protobuf:"varint,4,opt,name=similarity,proto3" json:"similarity,omitempty"`
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) Reset() {
	*x = DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plagiarism_detection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) ProtoMessage() {}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) ProtoReflect() protoreflect.Message {
	mi := &file_plagiarism_detection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion.ProtoReflect.Descriptor instead.
func (*DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) Descriptor() ([]byte, []int) {
	return file_plagiarism_detection_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) GetAnotherUserId() uint64 {
	if x != nil {
		return x.AnotherUserId
	}
	return 0
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) GetHtmlFileName() string {
	if x != nil {
		return x.HtmlFileName
	}
	return ""
}

func (x *DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion) GetSimilarity() int32 {
	if x != nil {
		return x.Similarity
	}
	return 0
}

var File_plagiarism_detection_proto protoreflect.FileDescriptor

var file_plagiarism_detection_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x6c,
	0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x6c, 0x61, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x16, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xac, 0x02, 0x0a, 0x1b, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x6d, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x6f, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x6d,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x74, 0x6d, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x29,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x03,
	0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x67,
	0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6c, 0x61, 0x6e, 0x22, 0x6f,
	0x0a, 0x28, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x54,
	0x4d, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x74, 0x6d,
	0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0x2a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x33, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x70, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x61,
	0x76, 0x61, 0x10, 0x02, 0x32, 0xa6, 0x05, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72,
	0x69, 0x73, 0x6d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0e,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2b,
	0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x6c,
	0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61,
	0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x3f, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x5c, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x80, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x54,
	0x4d, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3e, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x54, 0x4d, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x5b, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x54,
	0x4d, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2e, 0x0a,
	0x02, 0x70, 0x62, 0x42, 0x21, 0x70, 0x6c, 0x61, 0x67, 0x69, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x50, 0x00, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plagiarism_detection_proto_rawDescOnce sync.Once
	file_plagiarism_detection_proto_rawDescData = file_plagiarism_detection_proto_rawDesc
)

func file_plagiarism_detection_proto_rawDescGZIP() []byte {
	file_plagiarism_detection_proto_rawDescOnce.Do(func() {
		file_plagiarism_detection_proto_rawDescData = protoimpl.X.CompressGZIP(file_plagiarism_detection_proto_rawDescData)
	})
	return file_plagiarism_detection_proto_rawDescData
}

var file_plagiarism_detection_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_plagiarism_detection_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_plagiarism_detection_proto_goTypes = []interface{}{
	(Language)(0),                                                         // 0: plagiarism_detection.language
	(*DuplicateCheckRequest)(nil),                                         // 1: plagiarism_detection.DuplicateCheckRequest
	(*DuplicateCheckResponse)(nil),                                        // 2: plagiarism_detection.DuplicateCheckResponse
	(*ViewReportRequest)(nil),                                             // 3: plagiarism_detection.ViewReportRequest
	(*ViewReportResponse)(nil),                                            // 4: plagiarism_detection.ViewReportResponse
	(*GenerateTestFilesForDuplicateCheckRequest)(nil),                     // 5: plagiarism_detection.GenerateTestFilesForDuplicateCheckRequest
	(*GenerateTestHTMLFileForViewReportRequest)(nil),                      // 6: plagiarism_detection.GenerateTestHTMLFileForViewReportRequest
	(*Empty)(nil),                                                         // 7: plagiarism_detection.Empty
	(*DuplicateCheckResponse_DuplicateCheckResponseValue)(nil),            // 8: plagiarism_detection.DuplicateCheckResponse.DuplicateCheckResponseValue
	(*DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion)(nil), // 9: plagiarism_detection.DuplicateCheckResponse.DuplicateCheckResponseValue.Comparsion
}
var file_plagiarism_detection_proto_depIdxs = []int32{
	0,  // 0: plagiarism_detection.DuplicateCheckRequest.lan:type_name -> plagiarism_detection.language
	8,  // 1: plagiarism_detection.DuplicateCheckResponse.comparision:type_name -> plagiarism_detection.DuplicateCheckResponse.DuplicateCheckResponseValue
	0,  // 2: plagiarism_detection.GenerateTestFilesForDuplicateCheckRequest.lan:type_name -> plagiarism_detection.language
	9,  // 3: plagiarism_detection.DuplicateCheckResponse.DuplicateCheckResponseValue.comparisions:type_name -> plagiarism_detection.DuplicateCheckResponse.DuplicateCheckResponseValue.Comparsion
	1,  // 4: plagiarism_detection.plagiarismDetection.DuplicateCheck:input_type -> plagiarism_detection.DuplicateCheckRequest
	3,  // 5: plagiarism_detection.plagiarismDetection.ViewReport:input_type -> plagiarism_detection.ViewReportRequest
	5,  // 6: plagiarism_detection.plagiarismDetection.GenerateTestFilesForDuplicateCheck:input_type -> plagiarism_detection.GenerateTestFilesForDuplicateCheckRequest
	7,  // 7: plagiarism_detection.plagiarismDetection.RemoveTestFilesForDuplicateCheck:input_type -> plagiarism_detection.Empty
	6,  // 8: plagiarism_detection.plagiarismDetection.GenerateTestHTMLFileForViewReport:input_type -> plagiarism_detection.GenerateTestHTMLFileForViewReportRequest
	7,  // 9: plagiarism_detection.plagiarismDetection.RemoveTestHTMLFileForViewReport:input_type -> plagiarism_detection.Empty
	2,  // 10: plagiarism_detection.plagiarismDetection.DuplicateCheck:output_type -> plagiarism_detection.DuplicateCheckResponse
	4,  // 11: plagiarism_detection.plagiarismDetection.ViewReport:output_type -> plagiarism_detection.ViewReportResponse
	7,  // 12: plagiarism_detection.plagiarismDetection.GenerateTestFilesForDuplicateCheck:output_type -> plagiarism_detection.Empty
	7,  // 13: plagiarism_detection.plagiarismDetection.RemoveTestFilesForDuplicateCheck:output_type -> plagiarism_detection.Empty
	7,  // 14: plagiarism_detection.plagiarismDetection.GenerateTestHTMLFileForViewReport:output_type -> plagiarism_detection.Empty
	7,  // 15: plagiarism_detection.plagiarismDetection.RemoveTestHTMLFileForViewReport:output_type -> plagiarism_detection.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_plagiarism_detection_proto_init() }
func file_plagiarism_detection_proto_init() {
	if File_plagiarism_detection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plagiarism_detection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTestFilesForDuplicateCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTestHTMLFileForViewReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateCheckResponse_DuplicateCheckResponseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plagiarism_detection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateCheckResponse_DuplicateCheckResponseValue_Comparsion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plagiarism_detection_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plagiarism_detection_proto_goTypes,
		DependencyIndexes: file_plagiarism_detection_proto_depIdxs,
		EnumInfos:         file_plagiarism_detection_proto_enumTypes,
		MessageInfos:      file_plagiarism_detection_proto_msgTypes,
	}.Build()
	File_plagiarism_detection_proto = out.File
	file_plagiarism_detection_proto_rawDesc = nil
	file_plagiarism_detection_proto_goTypes = nil
	file_plagiarism_detection_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlagiarismDetectionClient is the client API for PlagiarismDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlagiarismDetectionClient interface {
	DuplicateCheck(ctx context.Context, in *DuplicateCheckRequest, opts ...grpc.CallOption) (*DuplicateCheckResponse, error)
	ViewReport(ctx context.Context, in *ViewReportRequest, opts ...grpc.CallOption) (*ViewReportResponse, error)
	// GenerateTestFiles 生成代码文件以作测试用
	GenerateTestFilesForDuplicateCheck(ctx context.Context, in *GenerateTestFilesForDuplicateCheckRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveTestFilesForDuplicateCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// GenerateTestFiles 生成HTML文件以作测试用
	GenerateTestHTMLFileForViewReport(ctx context.Context, in *GenerateTestHTMLFileForViewReportRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveTestHTMLFileForViewReport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type plagiarismDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewPlagiarismDetectionClient(cc grpc.ClientConnInterface) PlagiarismDetectionClient {
	return &plagiarismDetectionClient{cc}
}

func (c *plagiarismDetectionClient) DuplicateCheck(ctx context.Context, in *DuplicateCheckRequest, opts ...grpc.CallOption) (*DuplicateCheckResponse, error) {
	out := new(DuplicateCheckResponse)
	err := c.cc.Invoke(ctx, "/plagiarism_detection.plagiarismDetection/DuplicateCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismDetectionClient) ViewReport(ctx context.Context, in *ViewReportRequest, opts ...grpc.CallOption) (*ViewReportResponse, error) {
	out := new(ViewReportResponse)
	err := c.cc.Invoke(ctx, "/plagiarism_detection.plagiarismDetection/ViewReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismDetectionClient) GenerateTestFilesForDuplicateCheck(ctx context.Context, in *GenerateTestFilesForDuplicateCheckRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/plagiarism_detection.plagiarismDetection/GenerateTestFilesForDuplicateCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismDetectionClient) RemoveTestFilesForDuplicateCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/plagiarism_detection.plagiarismDetection/RemoveTestFilesForDuplicateCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismDetectionClient) GenerateTestHTMLFileForViewReport(ctx context.Context, in *GenerateTestHTMLFileForViewReportRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/plagiarism_detection.plagiarismDetection/GenerateTestHTMLFileForViewReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismDetectionClient) RemoveTestHTMLFileForViewReport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/plagiarism_detection.plagiarismDetection/RemoveTestHTMLFileForViewReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlagiarismDetectionServer is the server API for PlagiarismDetection service.
type PlagiarismDetectionServer interface {
	DuplicateCheck(context.Context, *DuplicateCheckRequest) (*DuplicateCheckResponse, error)
	ViewReport(context.Context, *ViewReportRequest) (*ViewReportResponse, error)
	// GenerateTestFiles 生成代码文件以作测试用
	GenerateTestFilesForDuplicateCheck(context.Context, *GenerateTestFilesForDuplicateCheckRequest) (*Empty, error)
	RemoveTestFilesForDuplicateCheck(context.Context, *Empty) (*Empty, error)
	// GenerateTestFiles 生成HTML文件以作测试用
	GenerateTestHTMLFileForViewReport(context.Context, *GenerateTestHTMLFileForViewReportRequest) (*Empty, error)
	RemoveTestHTMLFileForViewReport(context.Context, *Empty) (*Empty, error)
}

// UnimplementedPlagiarismDetectionServer can be embedded to have forward compatible implementations.
type UnimplementedPlagiarismDetectionServer struct {
}

func (*UnimplementedPlagiarismDetectionServer) DuplicateCheck(context.Context, *DuplicateCheckRequest) (*DuplicateCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateCheck not implemented")
}
func (*UnimplementedPlagiarismDetectionServer) ViewReport(context.Context, *ViewReportRequest) (*ViewReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewReport not implemented")
}
func (*UnimplementedPlagiarismDetectionServer) GenerateTestFilesForDuplicateCheck(context.Context, *GenerateTestFilesForDuplicateCheckRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTestFilesForDuplicateCheck not implemented")
}
func (*UnimplementedPlagiarismDetectionServer) RemoveTestFilesForDuplicateCheck(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTestFilesForDuplicateCheck not implemented")
}
func (*UnimplementedPlagiarismDetectionServer) GenerateTestHTMLFileForViewReport(context.Context, *GenerateTestHTMLFileForViewReportRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTestHTMLFileForViewReport not implemented")
}
func (*UnimplementedPlagiarismDetectionServer) RemoveTestHTMLFileForViewReport(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTestHTMLFileForViewReport not implemented")
}

func RegisterPlagiarismDetectionServer(s *grpc.Server, srv PlagiarismDetectionServer) {
	s.RegisterService(&_PlagiarismDetection_serviceDesc, srv)
}

func _PlagiarismDetection_DuplicateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismDetectionServer).DuplicateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism_detection.plagiarismDetection/DuplicateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismDetectionServer).DuplicateCheck(ctx, req.(*DuplicateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlagiarismDetection_ViewReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismDetectionServer).ViewReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism_detection.plagiarismDetection/ViewReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismDetectionServer).ViewReport(ctx, req.(*ViewReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlagiarismDetection_GenerateTestFilesForDuplicateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTestFilesForDuplicateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismDetectionServer).GenerateTestFilesForDuplicateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism_detection.plagiarismDetection/GenerateTestFilesForDuplicateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismDetectionServer).GenerateTestFilesForDuplicateCheck(ctx, req.(*GenerateTestFilesForDuplicateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlagiarismDetection_RemoveTestFilesForDuplicateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismDetectionServer).RemoveTestFilesForDuplicateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism_detection.plagiarismDetection/RemoveTestFilesForDuplicateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismDetectionServer).RemoveTestFilesForDuplicateCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlagiarismDetection_GenerateTestHTMLFileForViewReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTestHTMLFileForViewReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismDetectionServer).GenerateTestHTMLFileForViewReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism_detection.plagiarismDetection/GenerateTestHTMLFileForViewReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismDetectionServer).GenerateTestHTMLFileForViewReport(ctx, req.(*GenerateTestHTMLFileForViewReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlagiarismDetection_RemoveTestHTMLFileForViewReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismDetectionServer).RemoveTestHTMLFileForViewReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism_detection.plagiarismDetection/RemoveTestHTMLFileForViewReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismDetectionServer).RemoveTestHTMLFileForViewReport(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlagiarismDetection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plagiarism_detection.plagiarismDetection",
	HandlerType: (*PlagiarismDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DuplicateCheck",
			Handler:    _PlagiarismDetection_DuplicateCheck_Handler,
		},
		{
			MethodName: "ViewReport",
			Handler:    _PlagiarismDetection_ViewReport_Handler,
		},
		{
			MethodName: "GenerateTestFilesForDuplicateCheck",
			Handler:    _PlagiarismDetection_GenerateTestFilesForDuplicateCheck_Handler,
		},
		{
			MethodName: "RemoveTestFilesForDuplicateCheck",
			Handler:    _PlagiarismDetection_RemoveTestFilesForDuplicateCheck_Handler,
		},
		{
			MethodName: "GenerateTestHTMLFileForViewReport",
			Handler:    _PlagiarismDetection_GenerateTestHTMLFileForViewReport_Handler,
		},
		{
			MethodName: "RemoveTestHTMLFileForViewReport",
			Handler:    _PlagiarismDetection_RemoveTestHTMLFileForViewReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plagiarism_detection.proto",
}
